################################################################################
#
# BUILD STAGE
#
################################################################################
FROM node:lts as build

ARG MAINTAINER
ENV MAINTAINER "${MAINTAINER:-}"

ARG WORK_DIR
ENV WORK_DIR "${WORK_DIR:-/usr/src/app}"

ARG ENV
ENV ENV "${ENV:-production}"
ARG PORT
ENV PORT "${PORT:-8000}"
ARG PROTOCOL
ENV PROTOCOL "${PROTOCOL:-http}"
ARG DOMAIN
ENV DOMAIN "${DOMAIN:-localhost}"
ARG URL
ENV URL "${URL:-${PROTOCOL}://${DOMAIN}:${PORT}}"
ARG HEALTH_URL
ENV HEALTH_URL "${HEALTH_URL:-${URL}/health}"
# App info variables.
ARG APP_OWNER
ENV APP_OWNER "${APP_OWNER:-domain}"
ARG APP_PARENT
ENV APP_PARENT "${APP_PARENT:-subdomain}"
ARG APP_NAME
ENV APP_NAME "${APP_NAME:-example}"
ARG APP_VERSION
ENV APP_VERSION "${APP_VERSION:-1.0.0}"
ARG APP_DESCRIPTION
ENV APP_DESCRIPTION "${APP_DESCRIPTION:-}"
# App source variables.
ARG VCS_URL
ENV VCS_URL "${VCS_URL:-}"
ARG CI_URL
ENV CI_URL "${CI_URL:-}"

# Add more here:
# ARG VAR_NAME
# ENV VAR_NAME "${VAR_NAME:-default value}"

# Reverse-DNS Notation a.k.a. Uniform Type Identifier
ARG ID
ENV ID "${ID:-com.${APP_OWNER}.${APP_PARENT}.${APP_NAME}.dockerfile.pure}"

ENV PATH "$WORK_DIR/node_modules/.bin:$PATH"

LABEL \
  "id"="${ID}" \
  "maintainer"="${MAINTAINER}" \
  "owner"="${APP_OWNER}" \
  "parent"="${APP_PARENT}" \
  "name"="${APP_NAME}" \
  "version"="${APP_VERSION}" \
  "description"="${APP_DESCRIPTION}" \
  "url"="${URL}" \
  "vcs"="${VCS_URL}" \
  "ci"="${CI_URL}" \
  # Add more here:
  # "key"="value" \
  "build_timestamp"="$(date +%s)"

RUN echo "BUILD STAGE started." \
  \
  && echo "Installing operating systems dependencies." \
  && apt-get update && apt-get install --no-install-recommends --no-install-suggests -yq \
    curl \
    git \
    shellcheck \
    tree \
  && rm -rf /var/lib/apt/lists/* \
  \
  && echo "Installing global npm-based dependencies." \
  && npm i -g --unsafe \
    markdownlint-cli \
    semver \
  \
  && echo "Reducing image size; cleaning up the npm cache." \
  && npm cache clean -g -f < /dev/null 2> /dev/null \
  \
  && echo "Create and configure work directory." \
  && mkdir -p "${WORK_DIR}" \
  && ls -lahF --time-style=long-iso --color "${WORK_DIR}" \
  ;

WORKDIR "${WORK_DIR}"

COPY package.json package-lock.json "${WORK_DIR}"/
RUN npm install

COPY . "${WORK_DIR}/"

RUN echo "Confirm work directory contents." \
  && ls -lahF --time-style=long-iso --color "${WORK_DIR}" \
  \
  && echo "Ensure writeable log files." \
  && mkdir -p "${WORK_DIR}/logs" \
  && touch \
    "${WORK_DIR}/logs/error.log" \
    "${WORK_DIR}/logs/out.log" \
  && chmod -R 770 "${WORK_DIR}/logs" \
  \
  && echo "Ensure writeable coverage directory." \
  && mkdir -p "${WORK_DIR}/coverage" \
  && chmod -R 775 "${WORK_DIR}/coverage" \
  \
  && echo "Ensure entrypoints/binaries are executable." \
  && if [[ -f "${WORK_DIR}/docker-entrypoint.sh" ]]; then chmod 755 "${WORK_DIR}/docker-entrypoint.sh"; fi \
  && if [[ -f "${WORK_DIR}/docker-healthcheck" ]]; then chmod 755 "${WORK_DIR}/docker-healthcheck"; fi \
  \
  && echo "Confirm work directory contents." \
  && ls -lahF --time-style=long-iso --color "${WORK_DIR}" \
  \
  && echo "Running ShellCheck analysis on all shell scripts." \
  && shellcheck \
    ./*.sh \
    ./**/*.sh \
    ./bin/* \
    ./cli \
    ./run \
    ./scripts/* \
    ./scripts/aliases/* \
    ./scripts/functions/* \
  \
  && echo "Running Markdownlint analysis on Markdown files." \
  && markdownlint -i '**/*.md' -i '**/node_modules/**' -i 'dist/' -c '.markdownlint.yaml' \
  \
  # && echo "Building the application." \
  # && npm run build \
  # \
  && echo "BUILD STAGE complete." \
  ;

EXPOSE ${PORT:-8000}

CMD ["node", "server.js"]

HEALTHCHECK \
  --interval=3m33s \
  --timeout=9s \
  --start-period=60s \
  --retries=3 \
  CMD \
    curl -f "${HEALTH_URL:-http://localhost:8000/health}" || exit 1


################################################################################
#
# TEST STAGE(s)
#
# - Static Analysis, Linting and Style-checks for ALL file types; programming, scripting, docs.
# - Static Analysis for Vulnerabilities, Bugs, Code Smells, Duplications, Lines-of-Code, Cyclomatic Complexity and Cognitive Complexity.
# - Unit Tests for all lines of code and code paths.
# - Integration and End-to-End Testing to ensure clients and users of application are not negatively impacted by any changes.
# - Security White-Box Testing to ensure penetration tests can be run from local machines.
# - Load Testing to determine application runtime limitations and plan for scalability requirements.
#
################################################################################
FROM build as test

RUN echo "TEST STAGE started." \
  \
  && echo "Testing the application." \
  \
  # && npm run test \
  # \
  && echo "TEST STAGE complete." \
  ;


################################################################################
#
# REPORT STAGE(s)
#
################################################################################
FROM test as report

RUN echo "REPORT STAGE started." \
  \
  && echo "Running scans and publishing reports about the application." \
  \
  # && sonar-scanner \
  # \
  && echo "REPORT STAGE complete." \
  ;

# -----------------------------------------------------------------------------
# SonarScanner CLI Docker image
# https://github.com/sonarsource/sonar-scanner-cli-docker
# -----------------------------------------------------------------------------
# FROM sonarsource/sonar-scanner-cli as sonar

# ENV WORK_DIR ${WORK_DIR:-/usr/src/app}
# ENV SONAR_HOST_URL="${SONAR_HOST_URL:-https://sonarcloud.io}"
# ENV SONAR_TOKEN="${SONAR_TOKEN:-}"
# ENV SONAR_PROJECT_BASE_DIR="${WORK_DIR}"

# WORKDIR "${WORK_DIR}"

# COPY --from=report "${WORK_DIR}" "${WORK_DIR}"

# RUN sonar-scanner


################################################################################
#
# PREPARE STAGE(s)
#
################################################################################
FROM build as prepare

RUN echo "PREPARE STAGE started." \
  \
  && echo "Preparing app for runtime." \
  \
  && echo "Remove dependencies used for dev/building." \
  && rm -Rf node_modules \
  \
  && echo "Install only dependencies required for runtime." \
  && npm install --only=prod \
  \
  && echo "Clean all caches." \
  && npm cache clean -f < /dev/null 2> /dev/null \
  \
  && echo "Confirm work directory contents." \
  && ls -lahF --time-style=long-iso --color "${WORK_DIR}" \
  \
  && echo "PREPARE STAGE complete." \
  ;


################################################################################
#
# RUN STAGE
#
################################################################################
FROM node:lts-alpine as run

ARG MAINTAINER
ENV MAINTAINER "${MAINTAINER:-}"

ARG WORK_DIR
ENV WORK_DIR "${WORK_DIR:-/usr/src/app}"

ARG ENV
ENV ENV "${ENV:-production}"
ARG PORT
ENV PORT "${PORT:-8000}"
ARG PROTOCOL
ENV PROTOCOL "${PROTOCOL:-http}"
ARG DOMAIN
ENV DOMAIN "${DOMAIN:-localhost}"
ARG URL
ENV URL "${URL:-${PROTOCOL}://${DOMAIN}:${PORT}}"
ARG HEALTH_URL
ENV HEALTH_URL "${HEALTH_URL:-${URL}/health}"
# App info variables.
ARG APP_OWNER
ENV APP_OWNER "${APP_OWNER:-domain}"
ARG APP_PARENT
ENV APP_PARENT "${APP_PARENT:-subdomain}"
ARG APP_NAME
ENV APP_NAME "${APP_NAME:-example.dockerfile.pure}"
ARG APP_VERSION
ENV APP_VERSION "${APP_VERSION:-1.0.0}"
ARG APP_DESCRIPTION
ENV APP_DESCRIPTION "${APP_DESCRIPTION:-}"
# App source variables.
ARG VCS_URL
ENV VCS_URL "${VCS_URL:-}"
ARG CI_URL
ENV CI_URL "${CI_URL:-}"
# Reverse-DNS Notation a.k.a. Uniform Type Identifier
ARG ID
ENV ID "${ID:-com.${APP_OWNER}.${APP_PARENT}.${APP_NAME}}"

# Add more here:
# ARG VAR_NAME
# ENV VAR_NAME "${VAR_NAME:-default value}"

ENV PATH "${WORK_DIR}/node_modules/.bin:$PATH"

LABEL \
  "id"="${ID}" \
  "maintainer"="${MAINTAINER}" \
  "owner"="${APP_OWNER}" \
  "parent"="${APP_PARENT}" \
  "name"="${APP_NAME}" \
  "version"="${APP_VERSION}" \
  "description"="${APP_DESCRIPTION}" \
  "url"="${URL}" \
  "vcs"="${VCS_URL}" \
  "ci"="${CI_URL}" \
  "build_timestamp"="$(date +%s)"

# Run installs and prep.
RUN echo "RUN STAGE started." \
  \
  # && echo "Installing runtime dependencies." \
  # && apk update && apk add --no-cache --update \
  #   bash \
  #   curl \
  #   git \
  # && echo "Done installing runtime dependencies." \
  # \
  # && echo "Installing global npm-based dependencies." \
  # && npm i -g --unsafe \
  #   nodemon \
  # \
  # && echo "Reducing image size; cleaning up the npm cache." \
  # && npm cache clean -g -f < /dev/null 2> /dev/null \
  # \
  && mkdir -p "${WORK_DIR}" \
  \
  && echo "Done with prep." \
  ;

# Set work directory.
WORKDIR "${WORK_DIR}"

# When using multi-stage builds; only copy the artifacts you need into the final image.
# This allows you to use build stages without increasing the size of the final image.

# Copy app directories.
COPY --from=prepare "${WORK_DIR}/lib" "${WORK_DIR}/lib"
COPY --from=prepare "${WORK_DIR}/logs" "${WORK_DIR}/logs"
COPY --from=prepare "${WORK_DIR}/node_modules" "${WORK_DIR}/node_modules"
COPY --from=prepare "${WORK_DIR}/public" "${WORK_DIR}/public"
# Copy app files.
COPY --from=prepare \
  "${WORK_DIR}/docker-entrypoint.sh" \
  "${WORK_DIR}/docker-healthcheck" \
  "${WORK_DIR}/server.js" \
  "${WORK_DIR}/package-lock.json" \
  "${WORK_DIR}/package.json" \
  "${WORK_DIR}"/

RUN echo "Debugging and final testing before runtime." \
  \
  && ls -lahF --time-style=long-iso --color "${WORK_DIR}" \
  \
  # The Docker Bench for Security is a script that checks for dozens of
  # common best-practices around deploying Docker containers in production.
  # https://github.com/docker/docker-bench-security
  # && echo "Running Docker Bench for Security." \
  # && git clone --depth=1 https://github.com/docker/docker-bench-security.git \
  # && cd docker-bench-security \
  # && sudo sh docker-bench-security.sh \
  # \
  && echo "RUN STAGE complete." \
  ;

EXPOSE ${PORT:-8000}

CMD ["node", "server.js"]

HEALTHCHECK \
  --interval=3m33s \
  --timeout=9s \
  --start-period=60s \
  --retries=3 \
  CMD \
    curl -f "${HEALTH_URL:-http://localhost:8000/health}" || exit 1
